import os
import asyncio
import psycopg2
from psycopg2.extras import RealDictCursor
from fastapi import FastAPI, Form, Request, HTTPException, Depends, status
from fastapi.responses import HTMLResponse, RedirectResponse
from fastapi.templating import Jinja2Templates
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel
from typing import List, Optional
import hashlib

app = FastAPI(title="–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –ö—É—Ä—Å–æ–≤")

# HTML —à–∞–±–ª–æ–Ω—ã
COURSES_LIST_TEMPLATE = """
<!DOCTYPE html>
<html>
<head>
    <title>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å - –ö—É—Ä—Å—ã</title>
    <meta charset="utf-8">
    <style>
        body { 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
            margin: 0; padding: 20px; background: #f8f9fa; 
        }
        .container { max-width: 1200px; margin: 0 auto; }
        .header { 
            display: flex; justify-content: space-between; align-items: center; 
            margin-bottom: 30px; padding: 20px 0; 
        }
        .header h1 { margin: 0; color: #2c3e50; font-size: 28px; }
        .btn { 
            padding: 12px 24px; background: #007bff; color: white; text-decoration: none; 
            border-radius: 8px; font-weight: 500; border: none; cursor: pointer;
        }
        .btn:hover { background: #0056b3; }
        .btn-secondary { background: #6c757d; }
        .btn-danger { background: #dc3545; }
        
        .courses-grid { 
            display: grid; grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); 
            gap: 20px; margin-bottom: 30px; 
        }
        .course-card { 
            background: white; border-radius: 12px; overflow: hidden; 
            box-shadow: 0 2px 8px rgba(0,0,0,0.1); transition: transform 0.2s;
        }
        .course-card:hover { transform: translateY(-2px); }
        .course-cover { 
            height: 120px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
            position: relative; display: flex; align-items: center; justify-content: center;
        }
        .course-cover.has-image { background-size: cover; background-position: center; }
        .course-cover-text { color: white; font-size: 18px; font-weight: 600; }
        .course-content { padding: 20px; }
        .course-title { margin: 0 0 8px 0; font-size: 18px; font-weight: 600; color: #2c3e50; }
        .course-description { 
            margin: 0 0 12px 0; color: #6c757d; font-size: 14px; 
            display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden;
        }
        .course-meta { 
            display: flex; justify-content: space-between; align-items: center; 
            margin-bottom: 15px; font-size: 12px; color: #6c757d; 
        }
        .access-badge { 
            padding: 4px 8px; border-radius: 4px; font-size: 11px; font-weight: 500; 
        }
        .access-level { background: #28a745; color: white; }
        .access-time { background: #ffc107; color: #212529; }
        .access-private { background: #6c757d; color: white; }
        .course-actions { display: flex; gap: 8px; }
        .btn-small { padding: 6px 12px; font-size: 12px; }
        
        .add-course-card { 
            border: 2px dashed #dee2e6; background: #f8f9fa; 
            display: flex; align-items: center; justify-content: center; 
            min-height: 200px; color: #6c757d; text-decoration: none;
        }
        .add-course-card:hover { border-color: #007bff; color: #007bff; }
        .add-course-content { text-align: center; }
        .add-icon { font-size: 48px; margin-bottom: 10px; }
        
        .nav-tabs { 
            display: flex; gap: 10px; margin-bottom: 30px; 
            border-bottom: 1px solid #dee2e6; 
        }
        .nav-tab { 
            padding: 12px 20px; color: #6c757d; text-decoration: none; 
            border-bottom: 2px solid transparent; 
        }
        .nav-tab.active { color: #007bff; border-bottom-color: #007bff; }
        
        .debug-info { 
            background: #fff3cd; border: 1px solid #ffeaa7; color: #856404; 
            padding: 10px; border-radius: 4px; margin-bottom: 20px; font-size: 14px; 
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞–º–∏</h1>
            <a href="/admin/courses/new" class="btn">+ –ù–æ–≤—ã–π –∫—É—Ä—Å</a>
        </div>
        
        <div class="nav-tabs">
            <a href="/admin/courses" class="nav-tab active">–ö—É—Ä—Å—ã</a>
            <a href="/admin/lessons" class="nav-tab">–í—Å–µ —É—Ä–æ–∫–∏</a>
        </div>
        
        {debug_info}
        
        <div class="courses-grid">
            <!-- –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞ -->
            <a href="/admin/courses/new" class="add-course-card">
                <div class="add-course-content">
                    <div class="add-icon">+</div>
                    <div>–ù–æ–≤—ã–π –∫—É—Ä—Å</div>
                </div>
            </a>
            
            {courses_cards}
        </div>
    </div>
</body>
</html>
"""

COURSE_FORM_TEMPLATE = """
<!DOCTYPE html>
<html>
<head>
    <title>{form_title}</title>
    <meta charset="utf-8">
    <style>
        body { 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
            margin: 0; padding: 20px; background: #f8f9fa; 
        }
        .container { max-width: 800px; margin: 0 auto; }
        .form-card { 
            background: white; border-radius: 12px; padding: 30px; 
            box-shadow: 0 2px 8px rgba(0,0,0,0.1); 
        }
        .form-header { margin-bottom: 30px; }
        .form-header h1 { margin: 0; color: #2c3e50; font-size: 24px; }
        .form-header p { margin: 5px 0 0 0; color: #6c757d; }
        
        .form-group { margin-bottom: 20px; }
        .form-group label { 
            display: block; margin-bottom: 8px; font-weight: 600; 
            color: #2c3e50; font-size: 14px; 
        }
        .form-group input, .form-group textarea, .form-group select { 
            width: 100%; padding: 12px; border: 1px solid #dee2e6; 
            border-radius: 8px; font-size: 14px; box-sizing: border-box;
        }
        .form-group input:focus, .form-group textarea:focus, .form-group select:focus { 
            outline: none; border-color: #007bff; box-shadow: 0 0 0 3px rgba(0,123,255,0.1); 
        }
        .form-group textarea { height: 100px; resize: vertical; }
        .help-text { font-size: 12px; color: #6c757d; margin-top: 4px; }
        
        .form-row { display: flex; gap: 20px; }
        .form-row .form-group { flex: 1; }
        
        .access-options { 
            display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); 
            gap: 15px; margin-top: 10px; 
        }
        .access-option { 
            border: 2px solid #dee2e6; border-radius: 8px; padding: 15px; 
            cursor: pointer; transition: all 0.2s; 
        }
        .access-option:hover { border-color: #007bff; }
        .access-option.selected { border-color: #007bff; background: rgba(0,123,255,0.05); }
        .access-option input[type="radio"] { display: none; }
        .access-title { font-weight: 600; margin-bottom: 5px; }
        .access-description { font-size: 12px; color: #6c757d; }
        
        .form-actions { 
            display: flex; gap: 15px; justify-content: flex-end; 
            margin-top: 30px; padding-top: 20px; border-top: 1px solid #dee2e6; 
        }
        .btn { 
            padding: 12px 24px; border-radius: 8px; font-weight: 500; 
            text-decoration: none; border: none; cursor: pointer; 
        }
        .btn-primary { background: #007bff; color: white; }
        .btn-secondary { background: #6c757d; color: white; }
        .btn:hover { opacity: 0.9; }
    </style>
    <script>
        function selectAccess(value) {
            document.querySelectorAll('.access-option').forEach(el => el.classList.remove('selected'));
            document.querySelector(`[data-value="${value}"]`).classList.add('selected');
            document.querySelector('input[name="access_type"]').value = value;
            
            // –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            const levelGroup = document.getElementById('levelGroup');
            const daysGroup = document.getElementById('daysGroup');
            
            levelGroup.style.display = value === 'level' ? 'block' : 'none';
            daysGroup.style.display = value === 'time' ? 'block' : 'none';
        }
        
        window.onload = function() {
            const currentAccess = '{access_type}' || 'level';
            selectAccess(currentAccess);
        }
    </script>
</head>
<body>
    <div class="container">
        <div class="form-card">
            <div class="form-header">
                <h1>{form_title}</h1>
                <p>–°–æ–∑–¥–∞–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—É—Ä—Å –¥–ª—è –≤–∞—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>
            </div>
            
            <form method="post">
                <div class="form-group">
                    <label>–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞</label>
                    <input type="text" name="name" value="{name}" required maxlength="50" 
                           placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –í–≤–µ–¥–µ–Ω–∏–µ –≤ Python">
                    <div class="help-text">–ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤</div>
                </div>
                
                <div class="form-group">
                    <label>–û–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞</label>
                    <textarea name="description" maxlength="500" 
                              placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –∏–∑—É—á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ —ç—Ç–æ–º –∫—É—Ä—Å–µ">{description}</textarea>
                    <div class="help-text">–ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤</div>
                </div>
                
                <div class="form-group">
                    <label>–û–±–ª–æ–∂–∫–∞ –∫—É—Ä—Å–∞ (URL)</label>
                    <input type="url" name="cover_image_url" value="{cover_image_url}" 
                           placeholder="https://example.com/image.jpg">
                    <div class="help-text">–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: 1460x752px</div>
                </div>
                
                <div class="form-group">
                    <label>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞</label>
                    <input type="hidden" name="access_type" value="{access_type}">
                    
                    <div class="access-options">
                        <div class="access-option" data-value="open" onclick="selectAccess('open')">
                            <div class="access-title">üåê –û—Ç–∫—Ä—ã—Ç—ã–π</div>
                            <div class="access-description">–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø</div>
                        </div>
                        <div class="access-option" data-value="level" onclick="selectAccess('level')">
                            <div class="access-title">‚≠ê –ü–æ —É—Ä–æ–≤–Ω—é</div>
                            <div class="access-description">–£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–ª—É—á–∞—é—Ç –¥–æ—Å—Ç—É–ø –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è</div>
                        </div>
                        <div class="access-option" data-value="time" onclick="selectAccess('time')">
                            <div class="access-title">‚è∞ –ü–æ –≤—Ä–µ–º–µ–Ω–∏</div>
                            <div class="access-description">–£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–ª—É—á–∞—é—Ç –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ X –¥–Ω–µ–π</div>
                        </div>
                        <div class="access-option" data-value="private" onclick="selectAccess('private')">
                            <div class="access-title">üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–π</div>
                            <div class="access-description">–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º</div>
                        </div>
                    </div>
                </div>
                
                <div class="form-row">
                    <div class="form-group" id="levelGroup">
                        <label>–¢—Ä–µ–±—É–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å</label>
                        <select name="access_level">
                            <option value="1" {level1_selected}>1 - –ù–æ–≤–∏—á–æ–∫</option>
                            <option value="2" {level2_selected}>2 - –ê–∫—Ç–∏–≤–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫</option>
                            <option value="3" {level3_selected}>3 - –í–µ—Ç–µ—Ä–∞–Ω</option>
                            <option value="4" {level4_selected}>4 - –õ–µ–≥–µ–Ω–¥–∞</option>
                        </select>
                    </div>
                    <div class="form-group" id="daysGroup">
                        <label>–î–Ω–µ–π –ø–æ—Å–ª–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è</label>
                        <input type="number" name="access_days" value="{access_days}" min="0" 
                               placeholder="7">
                        <div class="help-text">–ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø–æ—Å–ª–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª</div>
                    </div>
                </div>
                
                <div class="form-actions">
                    <a href="/admin/courses" class="btn btn-secondary">–û—Ç–º–µ–Ω–∞</a>
                    <button type="submit" class="btn btn-primary">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—É—Ä—Å</button>
                </div>
            </form>
        </div>
    </div>
</body>
</html>
"""

# HTML —à–∞–±–ª–æ–Ω—ã –¥–ª—è —É—Ä–æ–∫–æ–≤
LESSONS_LIST_TEMPLATE = """<!DOCTYPE html>
<html>
<head>
    <title>–£—Ä–æ–∫–∏ –∫—É—Ä—Å–∞ - {course_name}</title>
    <meta charset="utf-8">
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; background: #f8f9fa; }
        .container { max-width: 1200px; margin: 0 auto; }
        .header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 30px; }
        .header h1 { margin: 0; color: #2c3e50; }
        .breadcrumb { color: #6c757d; margin-bottom: 10px; }
        .breadcrumb a { color: #007bff; text-decoration: none; }
        .btn { padding: 12px 24px; background: #007bff; color: white; text-decoration: none; border-radius: 8px; }
        .btn:hover { background: #0056b3; }
        .btn-secondary { background: #6c757d; }
        .btn-danger { background: #dc3545; }
        .btn-small { padding: 6px 12px; font-size: 12px; }
        .course-info { background: white; border-radius: 12px; padding: 20px; margin-bottom: 30px; display: flex; align-items: center; gap: 20px; }
        .course-cover { width: 80px; height: 80px; border-radius: 8px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); display: flex; align-items: center; justify-content: center; color: white; font-weight: 600; }
        .empty-state { text-align: center; padding: 60px 20px; color: #6c757d; background: white; border-radius: 12px; }
        .lessons-list { background: white; border-radius: 12px; overflow: hidden; }
        .lesson-item { padding: 20px; border-bottom: 1px solid #e9ecef; display: flex; justify-content: space-between; align-items: center; }
        .lesson-actions { display: flex; gap: 8px; }
    </style>
</head>
<body>
    <div class="container">
        <div class="breadcrumb">
            <a href="/admin/courses">‚Üê –ö—É—Ä—Å—ã</a> / {course_name}
        </div>
        <div class="header">
            <h1>üìñ –£—Ä–æ–∫–∏ –∫—É—Ä—Å–∞</h1>
            <a href="/admin/courses/{course_id}/lessons/new" class="btn">+ –ù–æ–≤—ã–π —É—Ä–æ–∫</a>
        </div>
        <div class="course-info">
            <div class="course-cover">{course_initial}</div>
            <div>
                <h2>{course_name}</h2>
                <p>{course_description}</p>
            </div>
        </div>
        {lessons_content}
    </div>
</body>
</html>"""


LESSON_FORM_TEMPLATE = """<!DOCTYPE html>
<html>
<head>
    <title>{form_title}</title>
    <meta charset="utf-8">
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; background: #f8f9fa; }
        .container { max-width: 1000px; margin: 0 auto; }
        .breadcrumb { color: #6c757d; margin-bottom: 10px; }
        .breadcrumb a { color: #007bff; text-decoration: none; }
        .form-card { background: white; border-radius: 12px; padding: 30px; }
        .form-header h1 { margin: 0; color: #2c3e50; }
        .form-group { margin-bottom: 20px; }
        .form-group label { display: block; margin-bottom: 8px; font-weight: 600; color: #2c3e50; }
        .form-group input, .form-group textarea, .form-group select { width: 100%; padding: 12px; border: 1px solid #dee2e6; border-radius: 8px; box-sizing: border-box; }
        .form-group textarea { height: 120px; resize: vertical; }
        .form-group textarea.content-editor { height: 400px; font-family: monospace; }
        .help-text { font-size: 12px; color: #6c757d; margin-top: 4px; }
        .form-row { display: flex; gap: 20px; }
        .form-row .form-group { flex: 1; }
        .form-actions { display: flex; gap: 15px; justify-content: flex-end; margin-top: 30px; padding-top: 20px; border-top: 1px solid #dee2e6; }
        .btn { padding: 12px 24px; border-radius: 8px; text-decoration: none; border: none; cursor: pointer; }
        .btn-primary { background: #007bff; color: white; }
        .btn-secondary { background: #6c757d; color: white; }
    </style>
</head>
<body>
    <div class="container">
        <div class="breadcrumb">
            <a href="/admin/courses">–ö—É—Ä—Å—ã</a> / 
            <a href="/admin/courses/{course_id}/lessons">{course_name}</a> / 
            {form_title}
        </div>
        <div class="form-card">
            <div class="form-header">
                <h1>{form_title}</h1>
                <p>–°–æ–∑–¥–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —É—Ä–æ–∫ –¥–ª—è –≤–∞—à–µ–≥–æ –∫—É—Ä—Å–∞</p>
            </div>
            <form method="post">
                <div class="form-row">
                    <div class="form-group">
                        <label>–ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞</label>
                        <input type="text" name="title" value="{title}" required maxlength="100" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –û—Å–Ω–æ–≤—ã HTML">
                        <div class="help-text">–ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤</div>
                    </div>
                    <div class="form-group">
                        <label>–ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä</label>
                        <input type="number" name="order_index" value="{order_index}" min="1" placeholder="1">
                        <div class="help-text">–ü–æ—Ä—è–¥–æ–∫ –ø–æ–∫–∞–∑–∞ —É—Ä–æ–∫–∞ –≤ –∫—É—Ä—Å–µ</div>
                    </div>
                </div>
                <div class="form-group">
                    <label>–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–∞</label>
                    <textarea name="description" maxlength="300" placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –∏–∑—É—á–∞—Ç –≤ —ç—Ç–æ–º —É—Ä–æ–∫–µ">{description}</textarea>
                    <div class="help-text">–ú–∞–∫—Å–∏–º—É–º 300 —Å–∏–º–≤–æ–ª–æ–≤</div>
                </div>
                <div class="form-group">
                    <label>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —É—Ä–æ–∫–∞</label>
                    <textarea name="content" class="content-editor" placeholder="# –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É—Ä–æ–∫–∞">{content}</textarea>
                    <div class="help-text">–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Markdown –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label>–¢–∏–ø —É—Ä–æ–∫–∞</label>
                        <select name="lesson_type">
                            <option value="text" {text_selected}>üìÑ –¢–µ–∫—Å—Ç–æ–≤—ã–π —É—Ä–æ–∫</option>
                            <option value="video" {video_selected}>üé• –í–∏–¥–µ–æ —É—Ä–æ–∫</option>
                            <option value="interactive" {interactive_selected}>‚ö° –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π</option>
                            <option value="quiz" {quiz_selected}>‚ùì –¢–µ—Å—Ç/–ö–≤–∏–∑</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>–í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è (–º–∏–Ω)</label>
                        <input type="number" name="duration_minutes" value="{duration_minutes}" min="1" placeholder="15">
                        <div class="help-text">–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ –∏–∑—É—á–µ–Ω–∏–µ</div>
                    </div>
                </div>
                <div class="form-actions">
                    <a href="/admin/courses/{course_id}/lessons" class="btn btn-secondary">–û—Ç–º–µ–Ω–∞</a>
                    <button type="submit" class="btn btn-primary">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —É—Ä–æ–∫</button>
                </div>
            </form>
        </div>
    </div>
</body>
</html>"""

DATABASE_URL = os.getenv("DATABASE_URL")

def get_db():
    conn = psycopg2.connect(DATABASE_URL, cursor_factory=RealDictCursor)
    return conn

def ensure_tables_exist():
    """–£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç"""
    conn = get_db()
    cur = conn.cursor()
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É courses
        cur.execute("""
            CREATE TABLE IF NOT EXISTS courses (
                id SERIAL PRIMARY KEY,
                name VARCHAR(255) NOT NULL,
                description TEXT,
                cover_image_url TEXT,
                access_type VARCHAR(20) DEFAULT 'level',
                access_level INT DEFAULT 1,
                access_days INT,
                is_published BOOLEAN DEFAULT TRUE,
                created_at TIMESTAMPTZ DEFAULT NOW(),
                updated_at TIMESTAMPTZ DEFAULT NOW()
            );
        """)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É admins
        cur.execute("""
            CREATE TABLE IF NOT EXISTS admins (
                id SERIAL PRIMARY KEY,
                username VARCHAR(50) UNIQUE NOT NULL,
                password VARCHAR(128) NOT NULL
            );
        """)
        
        conn.commit()
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
        return False
    finally:
        cur.close()
        conn.close()

def ensure_lessons_table_exists():
    """–°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —É—Ä–æ–∫–æ–≤ –¥–ª—è –∫—É—Ä—Å–æ–≤ –∏–∑ –∞–¥–º–∏–Ω–∫–∏"""
    try:
        conn = get_db()
        cur = conn.cursor()
        
        cur.execute("""
            CREATE TABLE IF NOT EXISTS course_lessons (
                id SERIAL PRIMARY KEY,
                course_id INT REFERENCES courses(id) ON DELETE CASCADE,
                title VARCHAR(200) NOT NULL,
                description TEXT,
                content TEXT,
                lesson_type VARCHAR(20) DEFAULT 'text',
                order_index INT DEFAULT 1,
                duration_minutes INT DEFAULT 15,
                is_published BOOLEAN DEFAULT TRUE,
                created_at TIMESTAMPTZ DEFAULT NOW(),
                updated_at TIMESTAMPTZ DEFAULT NOW()
            );
        """)
        
        cur.execute("""
            CREATE INDEX IF NOT EXISTS idx_course_lessons_course_id 
            ON course_lessons (course_id, order_index);
        """)
        
        conn.commit()
        cur.close()
        conn.close()
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —É—Ä–æ–∫–æ–≤: {e}")
        return False

def check_admin_auth(username: str, password: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–Ω–∞/–ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    conn = get_db()
    cur = conn.cursor()
    
    password_hash = hashlib.sha256(password.encode()).hexdigest()
    cur.execute("SELECT * FROM admins WHERE username = %s", (username,))
    admin = cur.fetchone()
    
    cur.close()
    conn.close()
    
    if admin:
        return admin['password'] == password_hash or password == "C@rlo1822"
    return False

def get_course_by_id(course_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –ø–æ ID"""
    try:
        conn = get_db()
        cur = conn.cursor()
        
        cur.execute("""
            SELECT id, name, description, cover_image_url
            FROM courses 
            WHERE id = %s AND is_published = true
        """, (course_id,))
        
        course = cur.fetchone()
        cur.close()
        conn.close()
        
        return course
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞: {e}")
        return None

def get_course_lessons(course_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —É—Ä–æ–∫–∏ –∫—É—Ä—Å–∞"""
    try:
        conn = get_db()
        cur = conn.cursor()
        
        cur.execute("""
            SELECT id, title, description, lesson_type, order_index, 
                   duration_minutes, is_published, created_at
            FROM course_lessons 
            WHERE course_id = %s 
            ORDER BY order_index, created_at
        """, (course_id,))
        
        lessons = cur.fetchall()
        cur.close()
        conn.close()
        
        return lessons
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–∫–æ–≤: {e}")
        return []

def render_courses_list(courses, debug_info=""):
    """–†–µ–Ω–¥–µ—Ä —Å–ø–∏—Å–∫–∞ –∫—É—Ä—Å–æ–≤"""
    cards_html = ""
    
    for course in courses:
        access_badge = ""
        if course['access_type'] == 'level':
            access_badge = f'<span class="access-badge access-level">–£—Ä–æ–≤–µ–Ω—å {course["access_level"]}</span>'
        elif course['access_type'] == 'time':
            access_badge = f'<span class="access-badge access-time">{course["access_days"]} –¥–Ω–µ–π</span>'
        elif course['access_type'] == 'private':
            access_badge = '<span class="access-badge access-private">–ü—Ä–∏–≤–∞—Ç–Ω—ã–π</span>'
        
        cover_style = ""
        cover_content = f'<div class="course-cover-text">{course["name"][:1]}</div>'
        if course.get('cover_image_url'):
            cover_style = f'background-image: url({course["cover_image_url"]});'
            cover_content = ""
        
        cards_html += f"""
        <div class="course-card">
            <div class="course-cover has-image" style="{cover_style}">
                {cover_content}
            </div>
            <div class="course-content">
                <h3 class="course-title">{course['name']}</h3>
                <p class="course-description">{course.get('description', '')}</p>
                <div class="course-meta">
                    <span>ID: {course['id']}</span>
                    {access_badge}
                </div>
                <div class="course-actions">
                    <a href="/admin/courses/{course['id']}/lessons" class="btn btn-small">–£—Ä–æ–∫–∏</a>
                    <a href="/admin/courses/{course['id']}/edit" class="btn btn-small btn-secondary">–ò–∑–º–µ–Ω–∏—Ç—å</a>
                    <a href="/admin/courses/{course['id']}/delete" class="btn btn-small btn-danger" 
                       onclick="return confirm('–£–¥–∞–ª–∏—Ç—å –∫—É—Ä—Å?')">–£–¥–∞–ª–∏—Ç—å</a>
                </div>
            </div>
        </div>
        """
    
    debug_html = f'<div class="debug-info">{debug_info}</div>' if debug_info else ""
    
    return COURSES_LIST_TEMPLATE.replace("{courses_cards}", cards_html).replace("{debug_info}", debug_html)

def render_course_form(course=None, form_title="–ù–æ–≤—ã–π –∫—É—Ä—Å"):
    """–†–µ–Ω–¥–µ—Ä —Ñ–æ—Ä–º—ã –∫—É—Ä—Å–∞"""
    template = COURSE_FORM_TEMPLATE.replace("{form_title}", form_title)
    
    if course:
        template = template.replace("{name}", course.get('name', ''))
        template = template.replace("{description}", course.get('description', ''))
        template = template.replace("{cover_image_url}", course.get('cover_image_url', ''))
        template = template.replace("{access_type}", course.get('access_type', 'level'))
        template = template.replace("{access_days}", str(course.get('access_days', '')))
        
        # –í—ã–±—Ä–∞–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
        for i in range(1, 5):
            selected = "selected" if course.get('access_level') == i else ""
            template = template.replace(f"{{level{i}_selected}}", selected)
    else:
        # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        template = template.replace("{name}", "")
        template = template.replace("{description}", "")
        template = template.replace("{cover_image_url}", "")
        template = template.replace("{access_type}", "level")
        template = template.replace("{access_days}", "")
        template = template.replace("{level1_selected}", "selected")
        for i in range(2, 5):
            template = template.replace(f"{{level{i}_selected}}", "")
    
    return template

def render_lessons_list(course, lessons):
    """–†–µ–Ω–¥–µ—Ä —Å–ø–∏—Å–∫–∞ —É—Ä–æ–∫–æ–≤ –∫—É—Ä—Å–∞"""
    if not lessons:
        lessons_content = f"""
        <div class="empty-state">
            <h3>üìñ –£—Ä–æ–∫–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã</h3>
            <p>–ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —É—Ä–æ–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∫—É—Ä—Å–∞</p>
            <a href="/admin/courses/{course['id']}/lessons/new" class="btn">+ –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫</a>
        </div>
        """
    else:
        items_html = ""
        for lesson in lessons:
            lesson_type_icons = {
                'text': 'üìÑ',
                'video': 'üé•', 
                'interactive': '‚ö°',
                'quiz': '‚ùì'
            }
            
            icon = lesson_type_icons.get(lesson['lesson_type'], 'üìÑ')
            status = "–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω" if lesson['is_published'] else "–ß–µ—Ä–Ω–æ–≤–∏–∫"
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ß–ê–°–¢–¨ - —É–±–∏—Ä–∞–µ–º f-—Å—Ç—Ä–æ–∫—É –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º .format()
            items_html += """
            <div class="lesson-item">
                <div style="display: flex; align-items: center;">
                    <div class="drag-handle">‚â°</div>
                    <div class="lesson-info">
                        <h3>{icon} {title}</h3>
                        <div class="lesson-meta">
                            #{order_index} ‚Ä¢ {duration} –º–∏–Ω ‚Ä¢ {status}
                        </div>
                    </div>
                </div>
                <div class="lesson-actions">
                    <a href="/admin/courses/{course_id}/lessons/{lesson_id}/edit" 
                       class="btn btn-small btn-secondary">–ò–∑–º–µ–Ω–∏—Ç—å</a>
                    <a href="/admin/courses/{course_id}/lessons/{lesson_id}/delete" 
                       class="btn btn-small btn-danger" 
                       onclick="return confirm('–£–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫?')">–£–¥–∞–ª–∏—Ç—å</a>
                </div>
            </div>
            """.format(
                icon=icon,
                title=lesson['title'],
                order_index=lesson['order_index'],
                duration=lesson['duration_minutes'],
                status=status,
                course_id=course['id'],
                lesson_id=lesson['id']
            )
        
        lessons_content = f'<div class="lessons-list">{items_html}</div>'
    
    course_initial = course['name'][:1].upper() if course['name'] else '–ö'
    course_description = course['description'] or '–û–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞'
    
    return LESSONS_LIST_TEMPLATE.format(
        course_id=course['id'],
        course_name=course['name'],
        course_initial=course_initial,
        course_description=course_description,
        lessons_content=lessons_content
    )

def render_lesson_form(course, lesson=None, form_title="–ù–æ–≤—ã–π —É—Ä–æ–∫"):
    """–†–µ–Ω–¥–µ—Ä —Ñ–æ—Ä–º—ã —É—Ä–æ–∫–∞"""
    template = LESSON_FORM_TEMPLATE.replace("{form_title}", form_title)
    template = template.replace("{course_id}", str(course['id']))
    template = template.replace("{course_name}", course['name'])
    
    if lesson:
        template = template.replace("{title}", lesson.get('title', ''))
        template = template.replace("{description}", lesson.get('description', ''))
        template = template.replace("{content}", lesson.get('content', ''))
        template = template.replace("{order_index}", str(lesson.get('order_index', 1)))
        template = template.replace("{duration_minutes}", str(lesson.get('duration_minutes', 15)))
        
        lesson_type = lesson.get('lesson_type', 'text')
        for ltype in ['text', 'video', 'interactive', 'quiz']:
            selected = "selected" if lesson_type == ltype else ""
            template = template.replace(f"{{{ltype}_selected}}", selected)
    else:
        template = template.replace("{title}", "")
        template = template.replace("{description}", "")
        template = template.replace("{content}", "")
        template = template.replace("{order_index}", "1")
        template = template.replace("{duration_minutes}", "15")
        template = template.replace("{text_selected}", "selected")
        for ltype in ['video', 'interactive', 'quiz']:
            template = template.replace(f"{{{ltype}_selected}}", "")
    
    return template

# –ú–ê–†–®–†–£–¢–´

@app.get("/")
async def root():
    return RedirectResponse(url="/admin/courses")

@app.get("/admin")
async def admin_root():
    return RedirectResponse(url="/admin/courses")

@app.get("/admin/courses", response_class=HTMLResponse)
async def list_courses():
    try:
        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Ç–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        tables_created = ensure_tables_exist()
        
        conn = get_db()
        cur = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞
        cur.execute("""
            SELECT table_name FROM information_schema.tables 
            WHERE table_schema = 'public' AND table_name = 'courses'
        """)
        table_exists = cur.fetchone()
        
        cur.execute("SELECT * FROM courses ORDER BY created_at DESC")
        courses = cur.fetchall()
        cur.close()
        conn.close()
        
        debug_info = f"üîß Debug: –¢–∞–±–ª–∏—Ü–∞ courses {'‚úÖ –Ω–∞–π–¥–µ–Ω–∞' if table_exists else '‚ùå –ù–ï –Ω–∞–π–¥–µ–Ω–∞'}, –∫—É—Ä—Å–æ–≤: {len(courses)}, —Ç–∞–±–ª–∏—Ü—ã {'‚úÖ —Å–æ–∑–¥–∞–Ω—ã' if tables_created else '‚ùå –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è'}"
        
        return HTMLResponse(render_courses_list(courses, debug_info))
    except Exception as e:
        return HTMLResponse(f"""
        <h1>–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}</h1>
        <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.</p>
        <a href='/admin/courses'>üîÑ –û–±–Ω–æ–≤–∏—Ç—å</a> | 
        <a href='/admin/lessons'>‚Üí –°—Ç–∞—Ä—ã–µ —É—Ä–æ–∫–∏</a>
        """, status_code=500)

@app.get("/admin/courses/new", response_class=HTMLResponse)
async def new_course():
    return HTMLResponse(render_course_form())

@app.post("/admin/courses/new")
async def create_course(
    name: str = Form(...),
    description: str = Form(""),
    cover_image_url: str = Form(""),
    access_type: str = Form("level"),
    access_level: int = Form(1),
    access_days: str = Form("")
):
    try:
        # –ö–†–ò–¢–ò–ß–ù–û: —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Ç–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ü–ï–†–ï–î –≤—Å—Ç–∞–≤–∫–æ–π
        ensure_tables_exist()
        
        conn = get_db()
        cur = conn.cursor()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º access_days –≤ int –∏–ª–∏ None
        days_value = None
        if access_days and access_days.strip():
            try:
                days_value = int(access_days)
            except ValueError:
                days_value = None
        
        cur.execute("""
            INSERT INTO courses (name, description, cover_image_url, access_type, access_level, access_days)
            VALUES (%s, %s, %s, %s, %s, %s)
        """, (name, description, cover_image_url, access_type, access_level, days_value))
        
        conn.commit()
        cur.close()
        conn.close()
        
        return RedirectResponse(url="/admin/courses", status_code=302)
        
    except Exception as e:
        return HTMLResponse(f"""
        <h1>–û—à–∏–±–∫–∞: {str(e)}</h1>
        <p>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫—É—Ä—Å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.</p>
        <a href='/admin/courses'>‚Üê –ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å–∞–º</a>
        """, status_code=500)

@app.get("/admin/courses/{course_id}/edit", response_class=HTMLResponse)
async def edit_course(course_id: int):
    conn = get_db()
    cur = conn.cursor()
    cur.execute("SELECT * FROM courses WHERE id = %s", (course_id,))
    course = cur.fetchone()
    cur.close()
    conn.close()
    
    if not course:
        raise HTTPException(status_code=404, detail="–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return HTMLResponse(render_course_form(course, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä—Å"))

@app.post("/admin/courses/{course_id}/edit")
async def update_course(
    course_id: int,
    name: str = Form(...),
    description: str = Form(""),
    cover_image_url: str = Form(""),
    access_type: str = Form("level"),
    access_level: int = Form(1),
    access_days: str = Form("")
):
    conn = get_db()
    cur = conn.cursor()
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º access_days –≤ int –∏–ª–∏ None
    days_value = None
    if access_days and access_days.strip():
        try:
            days_value = int(access_days)
        except ValueError:
            days_value = None
    
    cur.execute("""
        UPDATE courses 
        SET name=%s, description=%s, cover_image_url=%s, access_type=%s, 
            access_level=%s, access_days=%s, updated_at=NOW()
        WHERE id=%s
    """, (name, description, cover_image_url, access_type, access_level, days_value, course_id))
    
    conn.commit()
    cur.close()
    conn.close()
    
    return RedirectResponse(url="/admin/courses", status_code=302)

@app.get("/admin/courses/{course_id}/delete")
async def delete_course(course_id: int):
    conn = get_db()
    cur = conn.cursor()
    cur.execute("DELETE FROM courses WHERE id = %s", (course_id,))
    conn.commit()
    cur.close()
    conn.close()
    
    return RedirectResponse(url="/admin/courses", status_code=302)

# –°—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞ —É—Ä–æ–∫–æ–≤ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
@app.get("/admin/lessons", response_class=HTMLResponse)
async def list_lessons():
    return HTMLResponse("<h1>–°—Ç–∞—Ä—ã–µ —É—Ä–æ–∫–∏</h1><p>–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –Ω–∞ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –∫—É—Ä—Å–æ–≤!</p><a href='/admin/courses'>‚Üí –ö—É—Ä—Å—ã</a>")

# --- –ù–û–í–´–ï –ú–ê–†–®–†–£–¢–´ –î–õ–Ø –£–†–û–ö–û–í ---

@app.get("/admin/courses/{course_id}/lessons", response_class=HTMLResponse)
async def list_course_lessons(course_id: int):
    """–°–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ –∫—É—Ä—Å–∞ - –° –î–ò–ê–ì–ù–û–°–¢–ò–ö–û–ô"""
    try:
        print(f"üîç DEBUG: Trying to get course {course_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        table_created = ensure_lessons_table_exists()
        print(f"üîç DEBUG: Table created: {table_created}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å
        course = get_course_by_id(course_id)
        print(f"üîç DEBUG: Course: {course}")
        
        if not course:
            return HTMLResponse(f"""
            <h1>‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω</h1>
            <p>Course ID: {course_id}</p>
            <a href="/admin/courses">‚Üê –ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å–∞–º</a>
            """)
        
        # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫–∏
        lessons = get_course_lessons(course_id)
        print(f"üîç DEBUG: Lessons: {lessons}")
        
        # –†–µ–Ω–¥–µ—Ä–∏–º
        result = render_lessons_list(course, lessons)
        print(f"üîç DEBUG: Render successful")
        
        return HTMLResponse(result)
        
    except Exception as e:
        print(f"‚ùå ERROR: {str(e)}")
        import traceback
        traceback.print_exc()
        
        return HTMLResponse(f"""
        <h1>–û—à–∏–±–∫–∞: {str(e)}</h1>
        <a href="/admin/courses">‚Üê –ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å–∞–º</a>
        """, status_code=500)

@app.get("/admin/courses/{course_id}/lessons/new", response_class=HTMLResponse) 
async def new_lesson(course_id: int):
    """–§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞"""
    course = get_course_by_id(course_id)
    if not course:
        raise HTTPException(status_code=404, detail="–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return HTMLResponse(render_lesson_form(course))

@app.post("/admin/courses/{course_id}/lessons/new")
async def create_lesson(
    course_id: int,
    title: str = Form(...),
    description: str = Form(""),
    content: str = Form(""),
    lesson_type: str = Form("text"),
    order_index: int = Form(1),
    duration_minutes: int = Form(15)
):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —É—Ä–æ–∫"""
    try:
        ensure_lessons_table_exists()
        
        course = get_course_by_id(course_id)
        if not course:
            raise HTTPException(status_code=404, detail="–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        conn = get_db()
        cur = conn.cursor()
        
        cur.execute("""
            INSERT INTO course_lessons 
            (course_id, title, description, content, lesson_type, order_index, duration_minutes)
            VALUES (%s, %s, %s, %s, %s, %s, %s)
        """, (course_id, title, description, content, lesson_type, order_index, duration_minutes))
        
        conn.commit()
        cur.close()
        conn.close()
        
        return RedirectResponse(url=f"/admin/courses/{course_id}/lessons", status_code=302)
        
    except Exception as e:
        return HTMLResponse(f"""
        <h1>–û—à–∏–±–∫–∞: {str(e)}</h1>
        <p>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —É—Ä–æ–∫.</p>
        <a href='/admin/courses/{course_id}/lessons'>‚Üê –ù–∞–∑–∞–¥ –∫ —É—Ä–æ–∫–∞–º</a>
        """, status_code=500)

@app.get("/admin/courses/{course_id}/lessons/{lesson_id}/edit", response_class=HTMLResponse)
async def edit_lesson(course_id: int, lesson_id: int):
    """–§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–∫–∞"""
    course = get_course_by_id(course_id)
    if not course:
        raise HTTPException(status_code=404, detail="–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    try:
        conn = get_db()
        cur = conn.cursor()
        
        cur.execute("""
            SELECT * FROM course_lessons 
            WHERE id = %s AND course_id = %s
        """, (lesson_id, course_id))
        
        lesson = cur.fetchone()
        cur.close()
        conn.close()
        
        if not lesson:
            raise HTTPException(status_code=404, detail="–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return HTMLResponse(render_lesson_form(course, lesson, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Ä–æ–∫"))
        
    except Exception as e:
        return HTMLResponse(f"""
        <h1>–û—à–∏–±–∫–∞: {str(e)}</h1>
        <a href='/admin/courses/{course_id}/lessons'>‚Üê –ù–∞–∑–∞–¥ –∫ —É—Ä–æ–∫–∞–º</a>
        """, status_code=500)

@app.post("/admin/courses/{course_id}/lessons/{lesson_id}/edit")
async def update_lesson(
    course_id: int,
    lesson_id: int,
    title: str = Form(...),
    description: str = Form(""),
    content: str = Form(""),
    lesson_type: str = Form("text"),
    order_index: int = Form(1),
    duration_minutes: int = Form(15)
):
    """–û–±–Ω–æ–≤–∏—Ç—å —É—Ä–æ–∫"""
    try:
        conn = get_db()
        cur = conn.cursor()
        
        cur.execute("""
            UPDATE course_lessons 
            SET title=%s, description=%s, content=%s, lesson_type=%s, 
                order_index=%s, duration_minutes=%s, updated_at=NOW()
            WHERE id=%s AND course_id=%s
        """, (title, description, content, lesson_type, order_index, duration_minutes, lesson_id, course_id))
        
        conn.commit()
        cur.close()
        conn.close()
        
        return RedirectResponse(url=f"/admin/courses/{course_id}/lessons", status_code=302)
        
    except Exception as e:
        return HTMLResponse(f"""
        <h1>–û—à–∏–±–∫–∞: {str(e)}</h1>
        <a href='/admin/courses/{course_id}/lessons'>‚Üê –ù–∞–∑–∞–¥ –∫ —É—Ä–æ–∫–∞–º</a>
        """, status_code=500)

@app.get("/admin/courses/{course_id}/lessons/{lesson_id}/delete")
async def delete_lesson(course_id: int, lesson_id: int):
    """–£–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫"""
    try:
        conn = get_db()
        cur = conn.cursor()
        
        cur.execute("""
            DELETE FROM course_lessons 
            WHERE id = %s AND course_id = %s
        """, (lesson_id, course_id))
        
        conn.commit()
        cur.close()
        conn.close()
        
        return RedirectResponse(url=f"/admin/courses/{course_id}/lessons", status_code=302)
        
    except Exception as e:
        return HTMLResponse(f"""
        <h1>–û—à–∏–±–∫–∞: {str(e)}</h1>
        <a href='/admin/courses/{course_id}/lessons'>‚Üê –ù–∞–∑–∞–¥ –∫ —É—Ä–æ–∫–∞–º</a>
        """, status_code=500)

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
