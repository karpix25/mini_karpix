import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import './LessonReader.css';

const tg = window.Telegram?.WebApp;
const BACKEND_URL = "https://miniback.karpix.com";

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —É—Ä–æ–∫–∞ –≤ sidebar
const SidebarLesson = ({ lesson, isActive, onClick, isLocked }) => {
  return (
    <div 
      className={`sidebar-lesson ${isActive ? 'active' : ''} ${isLocked ? 'locked' : ''} ${lesson.completed ? 'completed' : ''}`}
      onClick={!isLocked ? onClick : undefined}
    >
      <div className="lesson-icon">
        {isLocked ? 'üîí' : lesson.completed ? '‚úÖ' : 'üìÑ'}
      </div>
      <div className="lesson-details">
        <div className="lesson-title">{lesson.title}</div>
        {lesson.duration && (
          <div className="lesson-duration">{lesson.duration}</div>
        )}
      </div>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–∞–∑–¥–µ–ª–∞ –≤ sidebar —Å toggle
const SidebarSection = ({ section, currentLessonId, onLessonClick, userPoints, isExpanded, onToggle }) => {
  return (
    <div className="sidebar-section">
      <div 
        className={`sidebar-section-header ${isExpanded ? 'expanded' : ''}`}
        onClick={onToggle}
      >
        <div className="section-info">
          <span className="section-icon">{section.icon || 'üìö'}</span>
          <span className="section-title">{section.title}</span>
        </div>
        <span className={`toggle-arrow ${isExpanded ? 'expanded' : ''}`}>‚ñº</span>
      </div>
      
      {isExpanded && (
        <div className="sidebar-lessons">
          {section.lessons.map((lesson) => {
            const isLocked = userPoints < (lesson.points || 0);
            return (
              <SidebarLesson
                key={lesson.id}
                lesson={lesson}
                isActive={lesson.id === currentLessonId}
                isLocked={isLocked}
                onClick={() => onLessonClick(lesson.id)}
              />
            );
          })}
        </div>
      )}
    </div>
  );
};

function LessonReader() {
  const { courseId, lessonId } = useParams();
  const navigate = useNavigate();
  
  const [course, setCourse] = useState(null);
  const [lesson, setLesson] = useState(null);
  const [loading, setLoading] = useState(true);
  const [userPoints, setUserPoints] = useState(0);
  const [isCompleted, setIsCompleted] = useState(false);
  const [expandedSections, setExpandedSections] = useState({});
  const [sidebarOpen, setSidebarOpen] = useState(false);

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram BackButton
  useEffect(() => {
    if (tg) {
      tg.BackButton.show();
      const onBackClick = () => navigate(`/course/${courseId}`);
      tg.BackButton.onClick(onBackClick);
      return () => tg.BackButton.offClick(onBackClick);
    }
  }, [navigate, courseId]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    const fetchData = async () => {
      try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (tg?.initData) {
          const userResponse = await fetch(`${BACKEND_URL}/api/me`, {
            headers: { 'X-Init-Data': tg.initData }
          });
          if (userResponse.ok) {
            const userData = await userResponse.json();
            setUserPoints(userData.points || 0);
          }
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–∞
        if (tg?.initData) {
          const courseResponse = await fetch(`${BACKEND_URL}/api/courses/${courseId}`, {
            headers: { 'X-Init-Data': tg.initData }
          });
          
          if (courseResponse.ok) {
            const courseData = await courseResponse.json();
            setCourse(courseData);
            
            // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫
            let currentLesson = null;
            courseData.sections?.forEach(section => {
              const foundLesson = section.lessons.find(l => l.id === lessonId);
              if (foundLesson) {
                currentLesson = foundLesson;
                // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Ä–∞–∑–¥–µ–ª —Å —Ç–µ–∫—É—â–∏–º —É—Ä–æ–∫–æ–º
                setExpandedSections(prev => ({ ...prev, [section.id]: true }));
              }
            });

            if (currentLesson) {
              // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —É—Ä–æ–∫–∞
              const lessonResponse = await fetch(`${BACKEND_URL}/api/courses/${courseId}/lessons/${lessonId}`, {
                headers: { 'X-Init-Data': tg.initData }
              });
              
              if (lessonResponse.ok) {
                const lessonData = await lessonResponse.json();
                setLesson(lessonData);
                setIsCompleted(currentLesson.completed || false);
              }
            }
          }
        } else {
          // –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
          const mockCourse = {
            id: courseId,
            title: "–í–≤–µ–¥–µ–Ω–∏–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É",
            sections: [
              {
                id: "introduction",
                title: "üöÄ Introduction",
                icon: "üöÄ",
                lessons: [
                  { id: "welcome", title: "Welcome!", points: 0, duration: "5 –º–∏–Ω", completed: false },
                  { id: "setup", title: "Project Setup", points: 10, duration: "10 –º–∏–Ω", completed: false }
                ]
              },
              {
                id: "basics",
                title: "üìö Beginner's Guide",
                icon: "üìö",
                lessons: [
                  { id: "html-basics", title: "HTML Basics", points: 20, duration: "15 –º–∏–Ω", completed: false },
                  { id: "css-intro", title: "CSS Introduction", points: 40, duration: "20 –º–∏–Ω", completed: false }
                ]
              }
            ]
          };
          
          setCourse(mockCourse);
          setUserPoints(50);
          
          // –ù–∞—Ö–æ–¥–∏–º —Ä–∞–∑–¥–µ–ª —Å —Ç–µ–∫—É—â–∏–º —É—Ä–æ–∫–æ–º –¥–ª—è –º–æ–∫–∞
          mockCourse.sections.forEach(section => {
            const foundLesson = section.lessons.find(l => l.id === lessonId);
            if (foundLesson) {
              setExpandedSections(prev => ({ ...prev, [section.id]: true }));
            }
          });
          
          setLesson({
            id: lessonId,
            title: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫—É—Ä—Å!",
            content: `# –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫—É—Ä—Å!

–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —É—Ä–æ–∫ –∫—É—Ä—Å–∞ "${courseId}".

## –ß—Ç–æ –≤—ã –∏–∑—É—á–∏—Ç–µ:

- –û—Å–Ω–æ–≤—ã –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
- –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
- –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏

## –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏

1. –ò–∑—É—á–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª
2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è
3. –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É

–£–¥–∞—á–∏ –≤ –æ–±—É—á–µ–Ω–∏–∏! üöÄ`
          });
        }
