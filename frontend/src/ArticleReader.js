import React, { useState, useEffect } from 'react';
import { useParams, Link } from 'react-router-dom';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import './ArticleReader.css';

const tg = window.Telegram?.WebApp;
const BACKEND_URL = "https://miniback.karpix.com";

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ sidebar
const LessonItem = ({ lesson, isActive, isCompleted, isLocked, onClick }) => {
  return (
    <div 
      className={`lesson-item ${isActive ? 'active' : ''} ${isCompleted ? 'completed' : ''} ${isLocked ? 'locked' : ''}`}
      onClick={!isLocked ? onClick : undefined}
    >
      <div className="lesson-status">
        {isCompleted ? (
          <div className="status-icon completed">‚úì</div>
        ) : isLocked ? (
          <div className="status-icon locked">üîí</div>
        ) : (
          <div className="status-icon available"></div>
        )}
      </div>
      
      <div className="lesson-content">
        <h4 className="lesson-title">{lesson.title}</h4>
        {lesson.description && (
          <p className="lesson-description">{lesson.description}</p>
        )}
      </div>
      
      {!isLocked && (
        <div className="lesson-arrow">‚Üí</div>
      )}
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫—É—Ä—Å–∞ –≤ sidebar
const CourseProgress = ({ courseName, progress, completedLessons, totalLessons }) => {
  return (
    <div className="course-progress-sidebar">
      <h3 className="course-name">{courseName}</h3>
      <div className="progress-stats">
        <span className="progress-text">{progress}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ</span>
        <span className="lessons-stats">{completedLessons}/{totalLessons} —É—Ä–æ–∫–æ–≤</span>
      </div>
      <div className="progress-bar-sidebar">
        <div 
          className="progress-fill-sidebar" 
          style={{ width: `${progress}%` }}
        ></div>
      </div>
    </div>
  );
};

function ArticleReader() {
  const { articleId } = useParams();
  const [article, setArticle] = useState(null);
  const [loading, setLoading] = useState(true);
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [isCompleted, setIsCompleted] = useState(false);

  // –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫—É—Ä—Å–∞
  const courseData = {
    name: "–û—Å–Ω–æ–≤—ã –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
    lessons: [
      { 
        id: "welcome", 
        title: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å", 
        description: "–í–≤–µ–¥–µ–Ω–∏–µ –≤ –∫—É—Ä—Å",
        completed: true 
      },
      { 
        id: "done", 
        title: "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ", 
        description: "–ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤",
        completed: false 
      },
      { 
        id: "advanced", 
        title: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏", 
        description: "–î–ª—è –æ–ø—ã—Ç–Ω—ã—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤",
        completed: false,
        locked: true 
      }
    ]
  };

  const currentLessonIndex = courseData.lessons.findIndex(l => l.id === articleId);
  const currentLesson = courseData.lessons[currentLessonIndex];
  const completedCount = courseData.lessons.filter(l => l.completed).length;
  const progress = Math.round((completedCount / courseData.lessons.length) * 100);

  useEffect(() => {
    if (tg) {
      tg.BackButton.show();
      const onBackClick = () => window.history.back();
      tg.BackButton.onClick(onBackClick);
      return () => tg.BackButton.offClick(onBackClick);
    }
  }, []);

  useEffect(() => {
    const fetchArticle = async () => {
      if (!tg?.initData || !articleId) return;
      
      try {
        const response = await fetch(`${BACKEND_URL}/api/content/${articleId}`, {
          headers: { 'X-Init-Data': tg.initData }
        });
        
        if (!response.ok) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç—å—é');
        
        const data = await response.json();
        setArticle(data);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–ø–æ–∫–∞ –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)
        setIsCompleted(currentLesson?.completed || false);
        
      } catch (error) {
        console.error(error);
      } finally {
        setLoading(false);
      }
    };

    fetchArticle();
  }, [articleId, currentLesson]);

  const handleMarkComplete = () => {
    setIsCompleted(!isCompleted);
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç API –≤—ã–∑–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    console.log(`–£—Ä–æ–∫ ${articleId} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ ${!isCompleted ? '–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π' : '–Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π'}`);
  };

  const handleLessonSelect = (lessonId) => {
    if (lessonId !== articleId) {
      window.location.href = `/article/${lessonId}`;
    }
    setSidebarOpen(false);
  };

  if (loading) {
    return (
      <div className="article-reader">
        <div className="loading-content">–ó–∞–≥—Ä—É–∑–∫–∞ —É—Ä–æ–∫–∞...</div>
      </div>
    );
  }

  return (
    <div className="article-reader">
      {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è sidebar –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö */}
      <button 
        className="sidebar-toggle"
        onClick={() => setSidebarOpen(!sidebarOpen)}
      >
        ‚ò∞ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
      </button>

      {/* Overlay –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è sidebar –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö */}
      {sidebarOpen && <div className="sidebar-overlay" onClick={() => setSidebarOpen(false)}></div>}

      {/* –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π */}
      <div className={`course-sidebar ${sidebarOpen ? 'open' : ''}`}>
        <CourseProgress 
          courseName={courseData.name}
          progress={progress}
          completedLessons={completedCount}
          totalLessons={courseData.lessons.length}
        />
        
        <div className="lessons-list">
          {courseData.lessons.map((lesson) => (
            <LessonItem
              key={lesson.id}
              lesson={lesson}
              isActive={lesson.id === articleId}
              isCompleted={lesson.completed}
              isLocked={lesson.locked}
              onClick={() => handleLessonSelect(lesson.id)}
            />
          ))}
        </div>

        {/* –†–µ—Å—É—Ä—Å—ã */}
        <div className="course-resources">
          <h4>–†–µ—Å—É—Ä—Å—ã</h4>
          <a href="#" className="resource-link">
            <span className="resource-icon">üîó</span>
            –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
          </a>
        </div>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ */}
      <div className="article-content">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É—Ä–æ–∫–∞ */}
        <div className="lesson-header">
          <h1 className="lesson-title">{currentLesson?.title || article?.title || '–£—Ä–æ–∫'}</h1>
          <button 
            className={`complete-button ${isCompleted ? 'completed' : ''}`}
            onClick={handleMarkComplete}
          >
            {isCompleted ? (
              <>
                <span className="check-icon">‚úì</span>
                –ó–∞–≤–µ—Ä—à–µ–Ω–æ
              </>
            ) : (
              '–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ'
            )}
          </button>
        </div>

        {/* –ë—Ä–∞—É–∑–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞–∑–∞–¥ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏) */}
        {!tg && (
          <Link to="/content" className="back-button">
            ‚Üê –ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å–∞–º
          </Link>
        )}

        {/* Markdown –∫–æ–Ω—Ç–µ–Ω—Ç */}
        <div className="markdown-content">
          <ReactMarkdown remarkPlugins={[remarkGfm]}>
            {article?.content || "–ö–æ–Ω—Ç–µ–Ω—Ç —É—Ä–æ–∫–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è..."}
          </ReactMarkdown>
        </div>

        {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —É—Ä–æ–∫–∞–º–∏ */}
        <div className="lesson-navigation">
          {currentLessonIndex > 0 && (
            <Link 
              to={`/article/${courseData.lessons[currentLessonIndex - 1].id}`}
              className="nav-button prev"
            >
              ‚Üê –ü—Ä–µ–¥—ã–¥—É—â–∏–π —É—Ä–æ–∫
            </Link>
          )}
          
          {currentLessonIndex < courseData.lessons.length - 1 && (
            <Link 
              to={`/article/${courseData.lessons[currentLessonIndex + 1].id}`}
              className="nav-button next"
            >
              –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫ ‚Üí
            </Link>
          )}
        </div>
      </div>
    </div>
  );
}

export default ArticleReader;
