import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import './Content.css'; // –°–æ–∑–¥–∞–¥–∏–º —ç—Ç–æ—Ç —Ñ–∞–π–ª

const tg = window.Telegram?.WebApp;
const BACKEND_URL = "https://miniback.karpix.com";

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –∫—É—Ä—Å–∞
const CourseCard = ({ article, progress = 0 }) => {
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è –ø—Ä–µ–≤—å—é –Ω–∞ –æ—Å–Ω–æ–≤–µ ID
  const getPreviewColor = (id) => {
    const colors = [
      'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
      'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)', 
      'linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)',
      'linear-gradient(135deg, #43e97b 0%, #38f9d7 100%)',
      'linear-gradient(135deg, #fa709a 0%, #fee140 100%)',
      'linear-gradient(135deg, #a8edea 0%, #fed6e3 100%)',
    ];
    const index = id.length % colors.length;
    return colors[index];
  };

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫—É—Ä—Å–∞
  const getStatusBadge = (rankRequired) => {
    if (rankRequired <= 1) return { text: '–î–æ—Å—Ç—É–ø–Ω–æ', color: '#28a745' };
    if (rankRequired <= 2) return { text: '–ù–æ–≤–∏—á–æ–∫+', color: '#ffc107' };
    if (rankRequired <= 3) return { text: '–í–µ—Ç–µ—Ä–∞–Ω', color: '#fd7e14' };
    return { text: '–õ–µ–≥–µ–Ω–¥–∞', color: '#dc3545' };
  };

  const status = getStatusBadge(article.rank_required);

  return (
    <Link to={`/article/${article.id}`} className="course-card-link">
      <div className="course-card">
        {/* –ü—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ */}
        <div 
          className="course-preview"
          style={{ background: getPreviewColor(article.id) }}
        >
          <div className="course-preview-content">
            <div className="course-icon">üìö</div>
            <div className="rank-badge" style={{ backgroundColor: status.color }}>
              {status.text}
            </div>
          </div>
        </div>

        {/* –ö–æ–Ω—Ç–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ */}
        <div className="course-content">
          <h3 className="course-title">{article.title}</h3>
          <p className="course-description">
            –ò–∑—É—á–∏—Ç–µ –æ—Å–Ω–æ–≤—ã –∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏. –ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏ –∏ –∑–Ω–∞–Ω–∏—è.
          </p>

          {/* –ü—Ä–æ–≥—Ä–µ—Å—Å */}
          <div className="course-progress">
            <div className="progress-info">
              <span className="progress-text">{progress}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ</span>
              <span className="lessons-count">5 —É—Ä–æ–∫–æ–≤</span>
            </div>
            <div className="progress-bar">
              <div 
                className="progress-fill" 
                style={{ width: `${progress}%` }}
              ></div>
            </div>
          </div>

          {/* –ú–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <div className="course-meta">
            <span className="course-difficulty">
              <span className="meta-icon">‚≠ê</span>
              –†–∞–Ω–≥ {article.rank_required}
            </span>
            <span className="course-duration">
              <span className="meta-icon">üïí</span>
              ~30 –º–∏–Ω
            </span>
          </div>
        </div>
      </div>
    </Link>
  );
};

function Content() {
  const [articles, setArticles] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchContent = async () => {
      if (!tg?.initData) {
        setError("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç–æ –≤ Telegram.");
        setLoading(false);
        return;
      }

      try {
        const response = await fetch(`${BACKEND_URL}/api/content`, {
          headers: { 'X-Init-Data': tg.initData }
        });
        
        if (!response.ok) {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç');
        }
        
        const data = await response.json();
        setArticles(data);
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:", error);
        setError(error.message);
      } finally {
        setLoading(false);
      }
    };

    fetchContent();
  }, []);

  if (loading) {
    return (
      <div className="content-container">
        <div className="content-header">
          <h2>üìö –û–±—É—á–∞—é—â–∏–µ –∫—É—Ä—Å—ã</h2>
        </div>
        <div className="loading-state">
          <div className="loader">–ó–∞–≥—Ä—É–∑–∫–∞ –∫—É—Ä—Å–æ–≤...</div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="content-container">
        <div className="content-header">
          <h2>üìö –û–±—É—á–∞—é—â–∏–µ –∫—É—Ä—Å—ã</h2>
        </div>
        <div className="error-state">
          <p>‚ùå {error}</p>
        </div>
      </div>
    );
  }

  return (
    <div className="content-container">
      <div className="content-header">
        <h2>üìö –û–±—É—á–∞—é—â–∏–µ –∫—É—Ä—Å—ã</h2>
        <p className="content-subtitle">
          –†–∞–∑–≤–∏–≤–∞–π—Ç–µ –Ω–∞–≤—ã–∫–∏, –ø–æ–≤—ã—à–∞–π—Ç–µ —Ä–∞–Ω–≥ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –Ω–æ–≤–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É
        </p>
      </div>

      {articles.length > 0 ? (
        <div className="courses-grid">
          {articles.map((article) => (
            <CourseCard 
              key={article.id} 
              article={article}
              progress={Math.floor(Math.random() * 101)} // –í—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–Ω–¥–æ–º–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
            />
          ))}
        </div>
      ) : (
        <div className="empty-state">
          <div className="empty-icon">üîí</div>
          <h3>–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤</h3>
          <p>–ü–æ–≤—ã—à–∞–π—Ç–µ —Å–≤–æ–π —Ä–∞–Ω–≥, —É—á–∞—Å—Ç–≤—É—è –≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö –∫–∞–Ω–∞–ª–∞, —á—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç!</p>
        </div>
      )}
    </div>
  );
}

export default Content;
