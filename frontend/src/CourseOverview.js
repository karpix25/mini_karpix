import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import './CourseOverview.css';

const tg = window.Telegram?.WebApp;
const BACKEND_URL = "https://miniback.karpix.com";

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–∞–∑–¥–µ–ª–∞ –±–µ–∑ —è–≤–Ω–æ–≥–æ toggle (–µ—Å–ª–∏ —Ä–∞–∑–¥–µ–ª—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã)
const CourseSection = ({ section, onLessonClick }) => {
  return (
    <div className="course-section-group"> {/* –ù–æ–≤–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Å–µ–∫—Ü–∏–∏ */}
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –Ω—É–∂–Ω–∞ (–Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ –Ω–µ –≤–∏–¥–µ–Ω) */}
      {/* –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å <h3 className="section-title">{section.title}</h3> –µ—Å–ª–∏ —Å–µ–∫—Ü–∏–∏ –Ω—É–∂–Ω—ã */}
      
      <ol className="section-lessons-list"> {/* –°–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ –≤ –≤–∏–¥–µ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ */}
        {section.lessons.map((lesson) => {
          // –õ–æ–≥–∏–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞ –±—ç–∫–µ–Ω–¥–µ –∏–ª–∏ –≤ userData.is_active
          // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º isUnlocked = true
          const isUnlocked = true; 
          return (
            <li 
              key={lesson.id}
              className={`lesson-list-item ${!isUnlocked ? 'locked' : ''} ${lesson.completed ? 'completed' : ''}`}
              onClick={() => isUnlocked && onLessonClick(lesson.id)}
            >
              {/* –ï—Å–ª–∏ –Ω—É–∂–Ω—ã –∏–∫–æ–Ω–∫–∏, —Ç–æ –∑–¥–µ—Å—å, –Ω–æ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ –∏—Ö –Ω–µ—Ç */}
              {/* <span className="lesson-item-icon">
                {!isUnlocked ? 'üîí' : lesson.completed ? '‚úÖ' : 'üìÑ'}
              </span> */}
              <span className="lesson-item-title">{lesson.title}</span>
              {/* <span className="lesson-duration">5 –º–∏–Ω</span> */} {/* –£–±—Ä–∞–Ω–æ, —Ç.–∫. –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ –Ω–µ—Ç */}
            </li>
          );
        })}
      </ol>
    </div>
  );
};

function CourseOverview() {
  const { courseId } = useParams();
  const navigate = useNavigate();
  const [course, setCourse] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [userRankLevel, setUserRankLevel] = useState(1); // –°–æ—Ö—Ä–∞–Ω—è–µ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–ª—è –ª–æ–≥–∏–∫–∏ –¥–æ—Å—Ç—É–ø–∞

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram BackButton
  useEffect(() => {
    if (tg) {
      tg.BackButton.show();
      const onBackClick = () => navigate('/content'); // –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∫—É—Ä—Å–æ–≤
      tg.BackButton.onClick(onBackClick);
      return () => tg.BackButton.offClick(onBackClick);
    }
  }, [navigate]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–∞
  useEffect(() => {
    const fetchCourseData = async () => {
      if (!tg?.initData) {
        setError("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç–æ –≤ Telegram.");
        setLoading(false);
        return;
      }

      try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —Ä–∞–Ω–≥–∞)
        const userResponse = await fetch(`${BACKEND_URL}/api/me`, {
          headers: { 'X-Init-Data': tg.initData }
        });
        if (userResponse.ok) {
          const userData = await userResponse.json();
          // –í–∞—à–∞ –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–Ω–≥–∞
          const rankLevel = Math.floor((userData.points || 0) / 50) + 1;
          setUserRankLevel(Math.min(rankLevel, 4)); 
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞
        const courseResponse = await fetch(`${BACKEND_URL}/api/courses/${courseId}`, {
          headers: { 'X-Init-Data': tg.initData }
        });
        
        if (!courseResponse.ok) {
          if (courseResponse.status === 404) { throw new Error('–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'); }
          if (courseResponse.status === 403) { throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—É—Ä—Å—É'); }
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—É—Ä—Å');
        }
        
        const courseData = await courseResponse.json();
        setCourse(courseData);
        
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–∞:', error);
        setError(error.message);
      } finally {
        setLoading(false);
      }
    };

    fetchCourseData();
  }, [courseId]);

  const handleLessonClick = (lessonId) => {
    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —á—Ç–µ–Ω–∏—è —É—Ä–æ–∫–∞
    navigate(`/course/${courseId}/lesson/${lessonId}`);
  };

  if (loading) {
    return (
      <div className="course-overview-container common-loading-error-state">
        <div className="loading-spinner"></div>
        <p>–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∫—É—Ä—Å...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="course-overview-container common-loading-error-state">
        <h2>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h2>
        <p>{error}</p>
        <button onClick={() => navigate('/content')} className="back-button">
          ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫—É—Ä—Å–∞–º
        </button>
      </div>
    );
  }

  if (!course) {
    return (
      <div className="course-overview-container common-loading-error-state">
        <h2>–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω</h2>
        <button onClick={() => navigate('/content')} className="back-button">
          ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫—É—Ä—Å–∞–º
        </button>
      </div>
    );
  }

  const progressPercentage = course.progress || 0;

  return (
    <div className="course-overview-container">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫—É—Ä—Å–∞ */}
      <div className="course-overview-header">
        <h1 className="course-overview-title">{course.title}</h1>
        {/* –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä */}
        <div className="course-overview-progress-bar">
          <div 
            className="course-overview-progress-fill" 
            style={{ width: `${progressPercentage}%` }}
          ></div>
        </div>
      </div>

      {/* –°–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤, –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –∏–∑ –≤—Å–µ—Ö —Å–µ–∫—Ü–∏–π */}
      <div className="course-overview-content-list">
        {course.sections?.map((section) => (
          <CourseSection
            key={section.id}
            section={section}
            onLessonClick={handleLessonClick}
            userRankLevel={userRankLevel} // –ü–µ—Ä–µ–¥–∞–µ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–ª—è –ª–æ–≥–∏–∫–∏ –¥–æ—Å—Ç—É–ø–∞
          />
        ))}
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–µ - –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å, –µ—Å–ª–∏ –æ–Ω–∞ –Ω—É–∂–Ω–∞ */}
      {/* <div className="access-info">
        <p className="access-text">
          üí° –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –æ—á–∫–∏ –≤ –∫–∞–Ω–∞–ª–µ, —á—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∫—É—Ä—Å—ã
        </p>
      </div> */}
    </div>
  );
}

export default CourseOverview;
