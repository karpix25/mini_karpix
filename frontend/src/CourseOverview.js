import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import './CourseOverview.css';

const tg = window.Telegram?.WebApp;
const BACKEND_URL = "https://miniback.karpix.com";

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–∞–∑–¥–µ–ª–∞ —Å toggle
const CourseSection = ({ section, isExpanded, onToggle, onLessonClick, userRankLevel }) => {
  return (
    <div className="course-section">
      <div 
        className={`section-header ${isExpanded ? 'expanded' : ''}`}
        onClick={onToggle}
      >
        <div className="section-info">
          <span className="section-icon">{section.icon || 'üìö'}</span>
          <span className="section-title">{section.title}</span>
        </div>
        <div className="section-controls">
          <span className="lessons-count">{section.lessons.length} —É—Ä–æ–∫–æ–≤</span>
          <span className={`toggle-arrow ${isExpanded ? 'expanded' : ''}`}>‚ñº</span>
        </div>
      </div>
      
      {isExpanded && (
        <div className="section-lessons">
          {section.lessons.map((lesson, index) => {
            const isUnlocked = true; // –í—Å–µ —É—Ä–æ–∫–∏ –≤ –∫—É—Ä—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã –µ—Å–ª–∏ –∫—É—Ä—Å –¥–æ—Å—Ç—É–ø–µ–Ω
            return (
              <div 
                key={lesson.id}
                className={`lesson-item ${!isUnlocked ? 'locked' : ''} ${lesson.completed ? 'completed' : ''}`}
                onClick={() => isUnlocked && onLessonClick(lesson.id)}
              >
                <div className="lesson-info">
                  <span className="lesson-icon">
                    {!isUnlocked ? 'üîí' : lesson.completed ? '‚úÖ' : 'üìÑ'}
                  </span>
                  <span className="lesson-title">{lesson.title}</span>
                </div>
                <span className="lesson-duration">5 –º–∏–Ω</span>
              </div>
            );
          })}
        </div>
      )}
    </div>
  );
};

function CourseOverview() {
  const { courseId } = useParams();
  const navigate = useNavigate();
  const [course, setCourse] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [userRankLevel, setUserRankLevel] = useState(1);
  const [expandedSections, setExpandedSections] = useState({});

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram BackButton
  useEffect(() => {
    if (tg) {
      tg.BackButton.show();
      const onBackClick = () => navigate('/content');
      tg.BackButton.onClick(onBackClick);
      return () => tg.BackButton.offClick(onBackClick);
    }
  }, [navigate]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–∞
  useEffect(() => {
    const fetchCourseData = async () => {
      if (!tg?.initData) {
        setError("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç–æ –≤ Telegram.");
        setLoading(false);
        return;
      }

      try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userResponse = await fetch(`${BACKEND_URL}/api/me`, {
          headers: { 'X-Init-Data': tg.initData }
        });
        
        if (userResponse.ok) {
          const userData = await userResponse.json();
          const points = userData.points || 0;
          // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–Ω–≥–∞: –∫–∞–∂–¥—ã–µ 50 –æ—á–∫–æ–≤ = +1 —Ä–∞–Ω–≥
          const rankLevel = Math.floor(points / 50) + 1;
          setUserRankLevel(Math.min(rankLevel, 4)); // –ú–∞–∫—Å —Ä–∞–Ω–≥ 4
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞
        const courseResponse = await fetch(`${BACKEND_URL}/api/courses/${courseId}`, {
          headers: { 'X-Init-Data': tg.initData }
        });
        
        if (!courseResponse.ok) {
          if (courseResponse.status === 404) {
            throw new Error('–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
          }
          if (courseResponse.status === 403) {
            throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—É—Ä—Å—É');
          }
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—É—Ä—Å');
        }
        
        const courseData = await courseResponse.json();
        console.log('Loaded course data:', courseData);
        setCourse(courseData);
        
        // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–∞–∑–¥–µ–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if (courseData.sections?.length > 0) {
          setExpandedSections({ [courseData.sections[0].id]: true });
        }
        
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–∞:', error);
        setError(error.message);
      } finally {
        setLoading(false);
      }
    };

    fetchCourseData();
  }, [courseId]);

  const handleSectionToggle = (sectionId) => {
    setExpandedSections(prev => ({
      ...prev,
      [sectionId]: !prev[sectionId]
    }));
  };

  const handleLessonClick = (lessonId) => {
    navigate(`/course/${courseId}/lesson/${lessonId}`);
  };

  const goBackToContent = () => {
    navigate('/content');
  };

  if (loading) {
    return (
      <div className="course-overview-container">
        <div className="loading-state">
          <div className="loading-spinner"></div>
          <p>–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∫—É—Ä—Å...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="course-overview-container">
        <div className="error-state">
          <h2>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h2>
          <p>{error}</p>
          <button onClick={goBackToContent} className="back-button">
            ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫—É—Ä—Å–∞–º
          </button>
        </div>
      </div>
    );
  }

  if (!course) {
    return (
      <div className="course-overview-container">
        <div className="error-state">
          <h2>–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω</h2>
          <button onClick={goBackToContent} className="back-button">
            ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫—É—Ä—Å–∞–º
          </button>
        </div>
      </div>
    );
  }

  const totalLessons = course.sections?.reduce((acc, section) => acc + section.lessons.length, 0) || 0;
  const completedLessons = course.sections?.reduce((acc, section) => 
    acc + section.lessons.filter(lesson => lesson.completed).length, 0
  ) || 0;
  const progressPercentage = course.progress || 0;

  return (
    <div className="course-overview-container">
      {/* –ú–æ–±–∏–ª—å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è */}
      <div className="mobile-navigation">
        <button className="back-to-menu" onClick={goBackToContent}>
          ‚Üê Menu
        </button>
      </div>

      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫—É—Ä—Å–∞ */}
      <div className="course-header">
        <h1 className="course-title">{course.title}</h1>
        <p className="course-description">{course.description}</p>
        
        <div className="course-stats">
          <div className="progress-section">
            <div className="progress-text">
              <span className="progress-percentage">{progressPercentage}%</span>
              <span className="progress-label">–∑–∞–≤–µ—Ä—à–µ–Ω–æ</span>
            </div>
            <div className="progress-bar">
              <div 
                className="progress-fill" 
                style={{ width: `${progressPercentage}%` }}
              ></div>
            </div>
          </div>
          
          <div className="course-meta">
            <span className="meta-item">
              <span className="meta-icon">üìö</span>
              {totalLessons} —É—Ä–æ–∫–æ–≤
            </span>
            <span className="meta-item">
              <span className="meta-icon">‚≠ê</span>
              –†–∞–Ω–≥ {course.rank_required}
            </span>
          </div>
        </div>
      </div>

      {/* –°–ø–∏—Å–æ–∫ —Ä–∞–∑–¥–µ–ª–æ–≤ */}
      <div className="course-sections">
        {course.sections?.map((section) => (
          <CourseSection
            key={section.id}
            section={section}
            isExpanded={expandedSections[section.id]}
            onToggle={() => handleSectionToggle(section.id)}
            onLessonClick={handleLessonClick}
            userRankLevel={userRankLevel}
          />
        ))}
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–µ */}
      <div className="access-info">
        <p className="access-text">
          üí° –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –æ—á–∫–∏ –≤ –∫–∞–Ω–∞–ª–µ, —á—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∫—É—Ä—Å—ã
        </p>
      </div>
    </div>
  );
}

export default CourseOverview;
