import React, { useState, useEffect } from 'react';
import { CircularProgressbar, buildStyles } from 'react-circular-progressbar';
import 'react-circularbar-progressbar/dist/styles.css'; // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç CSS –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
import './Profile.css'; // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π CSS –¥–ª—è Profile –∏ Leaderboard

const tg = window.Telegram?.WebApp;
const BACKEND_URL = "https://miniback.karpix.com";

// –ù–æ–≤—ã–π –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ—Å—Ç–∞ –∏ –º–µ–¥–∞–ª–∏ (–∏–∑ Leaderboard.js)
const RankDisplay = ({ rank }) => {
    let medal = null;
    if (rank === 1) medal = 'ü•á';
    if (rank === 2) medal = 'ü•à';
    if (rank === 3) medal = 'ü•â';

    return (
        <div className="user-rank-position">
            <span className="rank-number">{rank}</span>
            {medal && <span className="medal-emoji">{medal}</span>}
        </div>
    );
};

// –ù–æ–≤—ã–π –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ (–∏–∑ Leaderboard.js)
const LeaderboardUserRow = ({ user, period }) => {
    const scoreFormatted = period !== 'all' && user.score > 0 ? `+${user.score}` : user.score;
    const fullName = [user.first_name, user.last_name].filter(Boolean).join(' ') || user.username || 'User';
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º initials –¥–ª—è –∑–∞–≥–ª—É—à–∫–∏, –∫–∞–∫ –≤ Leaderboard.js
    const initials = fullName.split(' ').map(word => word[0]).join('').substring(0, 2).toUpperCase();
    const avatarUrl = user.photo_url || `https://ui-avatars.com/api/?name=${encodeURIComponent(initials)}&background=4A90E2&color=fff&size=40&font-size=0.5`;

    return (
        <div className="leaderboard-user-row">
            <RankDisplay rank={user.rank} />
            <img 
                src={avatarUrl} 
                alt={fullName} 
                className="leaderboard-avatar" // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å –∞–≤–∞—Ç–∞—Ä–æ–º –ø—Ä–æ—Ñ–∏–ª—è
                onError={(e) => {
                    e.target.src = `https://ui-avatars.com/api/?name=${encodeURIComponent(initials)}&background=6c757d&color=fff&size=40&font-size=0.5`;
                }}
            />
            <span className="leaderboard-user-name">{fullName}</span>
            <span className="leaderboard-user-score">{scoreFormatted}</span>
        </div>
    );
};


function Profile() {
  const [userData, setUserData] = useState(null);
  const [allRanks, setAllRanks] = useState([]);
  const [leaderboardData, setLeaderboardData] = useState({ top_users: [], current_user: null });
  const [leaderboardPeriod, setLeaderboardPeriod] = useState('7d'); // –ü–µ—Ä–∏–æ–¥ –¥–ª—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    if (!tg?.initData) {
      setError("–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤–Ω—É—Ç—Ä–∏ Telegram.");
      setLoading(false);
      return;
    }

    const fetchData = async () => {
      setLoading(true);
      setError(null);
      try {
        const headers = { 'X-Init-Data': tg.initData };
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –∏ –≤—Å–µ—Ö —Ä–∞–Ω–≥–æ–≤
        const [userRes, ranksRes] = await Promise.all([
          fetch(`${BACKEND_URL}/api/me`, { headers }),
          fetch(`${BACKEND_URL}/api/ranks`, { headers })
        ]);

        if (!userRes.ok) throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è");
        if (!ranksRes.ok) throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–Ω–≥–æ–≤");

        const userDataFetched = await userRes.json();
        const ranksDataFetched = await ranksRes.json();

        setUserData(userDataFetched);
        setAllRanks(ranksDataFetched);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
        const leaderboardResponse = await fetch(`${BACKEND_URL}/api/leaderboard?period=${leaderboardPeriod}`, { headers });
        if (!leaderboardResponse.ok) {
            const errorData = await leaderboardResponse.json();
            throw new Error(errorData.detail || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞");
        }
        const leaderboardDataFetched = await leaderboardResponse.json();
        setLeaderboardData(leaderboardDataFetched);

      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", err);
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, [leaderboardPeriod]); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–µ—Ä–∏–æ–¥–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞

  if (loading) return <div className="profile-container common-loading-error-state">–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  if (error) return <div className="profile-container common-loading-error-state"><strong>–û—à–∏–±–∫–∞:</strong><p>{error}</p></div>;
  if (!userData || allRanks.length === 0) return <div className="profile-container common-loading-error-state">–ó–∞–≥—Ä—É–∑–∫–∞...</div>;

  const fullName = [userData.first_name, tg.initDataUnsafe?.user?.last_name || ''].filter(Boolean).join(' ');
  const initials = fullName.split(' ').map(word => word[0]).join('').substring(0, 2).toUpperCase();
  const profileAvatarUrl = tg.initDataUnsafe?.user?.photo_url || `https://ui-avatars.com/api/?name=${encodeURIComponent(initials)}&background=4A90E2&color=fff&size=150&font-size=0.5`;

  // –õ–∏–¥–µ—Ä–±–æ—Ä–¥: –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-10
  const top10Users = leaderboardData.top_users.slice(0, 10);
  const currentUserLeaderboardData = leaderboardData.current_user ? (top10Users.find(u => leaderboardData.current_user && u.user_id === leaderboardData.current_user.user_id) || leaderboardData.current_user) : null;

  return (
    <div className="profile-container">
      {/* –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
      <div className="profile-card">
        <div className="profile-header">
          <div className="progress-container">
            <CircularProgressbar
              value={userData.progress_percentage || 0}
              text={`${userData.level || userData.rank}`} // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∏–ª–∏ —Ä–∞–Ω–≥
              strokeWidth={5}
              styles={buildStyles({
                textColor: '#1A1A1A', // –¢–µ–º–Ω—ã–π —Ç–µ–∫—Å—Ç
                pathColor: '#61dafb', // –ê–∫—Ü–µ–Ω—Ç–Ω—ã–π —Ü–≤–µ—Ç
                trailColor: '#E9ECEF', // –°–≤–µ—Ç–ª—ã–π —Ç—Ä–µ–∫
                textSize: '28px',
                backgroundColor: 'white', // –§–æ–Ω –≤–Ω—É—Ç—Ä–∏ –∫—Ä—É–≥–∞
              })}
            />
            <img 
              src={profileAvatarUrl} 
              alt="avatar" 
              className="profile-avatar" // –û—Ç–¥–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è
              onError={(e) => {
                e.target.src = `https://ui-avatars.com/api/?name=${encodeURIComponent(initials)}&background=6c757d&color=fff&size=150&font-size=0.5`;
              }}
            />
             {/* –ó–Ω–∞—á–æ–∫ —Ä–∞–Ω–≥–∞ –Ω–∞ –∞–≤–∞—Ç–∞—Ä–µ, –∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ */}
            <div className="profile-rank-badge">
                {userData.rank_level}
            </div>
          </div>
          <h2 className="profile-name">{fullName}</h2>
          <p className="profile-rank-name">
              Level {userData.level} - {userData.rank} 
              {/* –ï—Å–ª–∏ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ –µ—Å—Ç—å –∏–∫–æ–Ω–∫–∞ - –µ–µ —Å—é–¥–∞ */}
              <span className="rank-icon-text"> üõ†Ô∏è</span>
          </p>
          {userData.points_to_next_rank !== null ? (
              <p className="profile-points-to-go">{userData.points_to_next_rank} points to level up <span className="help-icon">?</span></p>
          ) : (
              <p className="profile-points-to-go">–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å!</p>
          )}
        </div>
      </div>

      {/* –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–∞–Ω–≥–æ–≤ */}
      <div className="profile-card ranks-list-card">
        <h3 className="card-title">–í—Å–µ —É—Ä–æ–≤–Ω–∏</h3>
        <div className="ranks-list">
            {allRanks.map(rank => (
            <div key={rank.level} className={`rank-item ${rank.is_unlocked ? 'unlocked' : 'locked'}`}>
                <div className="rank-item-icon">
                {rank.is_unlocked ? '‚úÖ' : 'üîí'}
                </div>
                <div className="rank-item-info">
                Level {rank.level} - {rank.name}
                <span>{rank.min_points}+ –æ—á–∫–æ–≤</span>
                </div>
            </div>
            ))}
        </div>
      </div>

      {/* –°–µ–∫—Ü–∏—è –õ–∏–¥–µ—Ä–±–æ—Ä–¥–∞ */}
      <div className="profile-card leaderboard-section">
        <div className="leaderboard-header">
            <h3 className="card-title">Leaderboard ({leaderboardPeriod === '7d' ? '7-day' : leaderboardPeriod === '30d' ? '30-day' : 'All-time'})</h3>
            <div className="period-selector">
                <button onClick={() => setLeaderboardPeriod('7d')} className={leaderboardPeriod === '7d' ? 'active' : ''}>7-day</button>
                <button onClick={() => setLeaderboardPeriod('30d')} className={leaderboardPeriod === '30d' ? 'active' : ''}>30-day</button>
                <button onClick={() => setLeaderboardPeriod('all')} className={leaderboardPeriod === 'all' ? 'active' : ''}>All-time</button>
            </div>
        </div>

        {top10Users.length > 0 ? (
            <div className="leaderboard-list">
                {top10Users.map(user => (
                    <LeaderboardUserRow key={user.user_id} user={user} period={leaderboardPeriod} />
                ))}
            </div>
        ) : (
            <div className="no-leaders-message">–õ–∏–¥–µ—Ä—ã –ø–æ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã. –ë—É–¥—å –ø–µ—Ä–≤—ã–º!</div>
        )}

        {/* –ö–∞—Ä—Ç–æ—á–∫–∞ "Your rank", –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Ç–æ–ø-10 */}
        {currentUserLeaderboardData && !top10Users.some(u => u.user_id === currentUserLeaderboardData.user_id) && (
             <div className="leaderboard-your-rank-card">
                <h3 className="leaderboard-your-rank-title">Your rank</h3>
                <LeaderboardUserRow user={currentUserLeaderboardData} period={leaderboardPeriod} />
            </div>
        )}
      </div>
    </div>
  );
}

export default Profile;
